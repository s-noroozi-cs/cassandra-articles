What is a Database Model?
	A database model shows the logical structure of a database, including the relationships and constraints 
	that determine how data can be stored and accessed. Individual database models are designed based on the rules and concepts 
	of whichever broader data model the designers adopt. Most data models can be represented by an accompanying database diagram.
	In another words: 
	A Database model defines the logical design and structure of a database and defines 
	how data will be stored, accessed and updated in a database management system. 
	
Types of database models
	Some of the most common ones include:

	- Hierarchical database model
	- Relational model
	- Network model
	- Object-oriented database model
	- Entity-relationship model
	- Document model
	- Entity-attribute-value model
	- Star schema
	- The object-relational model, which combines the two that make up its name
	
	You may choose to describe a database with any one of these depending on several factors. 
	The biggest factor is whether the database management system you are using supports a particular model. 
	Most database management systems are built with a particular data model in mind and require their users to adopt that model, 
	although some do support multiple models.

	In addition, different models apply to different stages of the database design process. 
	High-level conceptual data models are best for mapping out relationships between data in ways that people perceive that data. 
	Record-based logical models, on the other hand, more closely reflect ways that the data is stored on the server.

	Selecting a data model is also a matter of aligning your priorities for the database with the strengths of a particular model, 
	whether those priorities include speed, cost reduction, usability, or something else.

	Relational model
		The most common model, the relational model sorts data into tables, also known as relations, each of which consists of columns and rows. 
		Each column lists an attribute of the entity in question, such as price, zip code, or birth date. 
		Together, the attributes in a relation are called a domain. 
		A particular attribute or combination of attributes is chosen as a primary key that can be referred to in other tables, when it’s called a foreign key.
		Within the database, tables can be normalized, or brought to comply with normalization rules that make 
		the database flexible, adaptable, and scalable. When normalized, each piece of data is atomic, or broken into the smallest useful pieces.
		Relational databases are typically written in Structured Query Language (SQL). 
		The model was introduced by E.F. Codd in 1970.
	
	Hierarchical model
		The hierarchical model organizes data into a tree-like structure, where each record has a single parent or root. 
		Sibling records are sorted in a particular order. That order is used as the physical order for storing the database. 
		This model is good for describing many real-world relationships.
		This model was primarily used by IBM’s Information Management Systems in the 60s and 70s, 
		but they are rarely seen today due to certain operational inefficiencies.
		
	Network model
		The network model builds on the hierarchical model by allowing many-to-many relationships between linked records, implying multiple parent records. 
		Based on mathematical set theory, the model is constructed with sets of related records. 
		Each set consists of one owner or parent record and one or more member or child records. 
		A record can be a member or child in multiple sets, allowing this model to convey complex relationships.
		It was most popular in the 70s after it was formally defined by the Conference on Data Systems Languages (CODASYL).
		
	Object-oriented model
		This model defines a database as a collection of objects, or reusable software elements, with associated features and methods. 
		There are several kinds of object-oriented databases:
			- A multimedia database incorporates media, such as images, that could not be stored in a relational database.
			- A hypertext database allows any object to link to any other object. It’s useful for organizing lots of disparate data, 
				but it’s not ideal for numerical analysis.
		The object-oriented database model is the best known post-relational database model, 
		since it incorporates tables, but isn’t limited to tables. 
		Such models are also known as hybrid database models.
		
	Object-relational model
		This hybrid database model combines the simplicity of the relational model with 
			some of the advanced functionality of the object-oriented database model. 
		In essence, it allows designers to incorporate objects into the familiar table structure.
		Languages and call interfaces include SQL3, vendor languages, ODBC, JDBC, and proprietary call interfaces 
			that are extensions of the languages and interfaces used by the relational model.
			
	Entity-relationship model
		This model captures the relationships between real-world entities much like the network model, 
		but it isn’t as directly tied to the physical structure of the database. 
		Instead, it’s often used for designing a database conceptually.
		Here, the people, places, and things about which data points are stored are referred to as entities, 
		each of which has certain attributes that together make up their domain. 
		The cardinality, or relationships between entities, are mapped as well.
		
	NoSQL database models
		- The graph database model, which is even more flexible than a network model, allowing any node to connect with any other.
		- The multivalue model, which breaks from the relational model by allowing attributes to contain a list of data rather than a single data point.
		- The document model, which is designed for storing and managing documents or semi-structured data, rather than atomic data.
		
Understand the analogy between RDBMS and Cassandra Data Model

	CASSANDRA
		- high performance and highly scalable distributed NoSQL DBMS
		- unstructured data
		- flexible schema
		- master-slave core architecture means no single point of failure
		- handles high volume incoming data velocity
		- there are various data source means data come from one/few location
		- it supports simple transactions
		- the outermost container is Keyspace
		- it follows decentralized deployments
		- data written in many locations
		- row represents a unit of replication
		- column represents a unit of storage
		- relationships are represented using collections
		
	RDBMS
		- designed for relational databases
		- It deals with structured data
		- It has fixed schema
		- it has master-slave core architecture means single point of failure
		- it handles moderate incoming data velocity
		- there is limited data source means data come from many locations
		- It supports complex and nested transactions
		- the outermost container is database
		- it follows centralized deployments
		- mainly data written in one location
		- row represents a single record
		- column represents an attribute
		- relationships are represented using keys and joins etc
		
What is Cluster?
	The cluster is a collection of nodes that represents a single system. 
	A Cluster is basically the outermost shell or storage unit in a database. 
	The Cassandra Cluster contains many different layers of storage units. 
	Each layer contains the other.
	
	Node Cluster
		This layer basically comprises of systems or computers or storage units. 
		They collectively share data through the replication in Cassandra and independently as well. 
		The replication factor in the nodes allows the user to have a redundancy for the data stored.
		
	Keyspace
		In a node, there are many keyspaces. 
		These keyspaces are basically the outermost storage unit in a system. 
		They contain the main data. 
		The data distributed according to their properties or areas.
		
	Column Families/Tables
		The keyspace is further divided into column families. 
		These column families have different areas or headings under which the data is distributed. 
		In a keyspace, these column families are categorized into different headings or titles.
		These titles further contain different layers of storage units. 
		These column families can also be characterized by tables. 
		The column families differ from the tables through their APIs.
		
	Rows
		The Rows are basically the classification under which the column family is divided. 
		These classifications, in turn, create specific distribution criteria for the entries.
		
	Column
		This is the innermost layer in a database. 
		The column basically is divided into different titles or headings. 
		These headings contain the main data regarding the specific entry.
		
Column Family
	A Column family is similar to a table in RDBMS or Relational Database Management System and is a logical division that associates similar data. 
	Basically, in similar data you tend to store some kind of data that are of similar subjects.
	For example, an order data is stored in a single column family so you can have an order ID as a row key 
	as well as various columns like the kind of product was brought as a part of that order to be stored in the particular order family. 
	
	Types of Columns
		Column Family is nothing but a table which is analogous to a table in an RDBMS world. 
		There are certain types to it, namely;

			Static column Family 
				Static Column family is where the names and data types are defined. 
				So when the column family is created, the option to name the column name and data types is available. 
				It’s called static because the columns remain static and the number of columns available will be known.

			Dynamic Column Family 
				A dynamic column family on the other hand doesn’t define the column names up front and Cassandra’s ability 
				to use arbitrary application and column names to store data is available. 
				So dynamic helps in a way because in an unstructured data, most of the times, 
				dynamic column family helps in taking care of new fields that might have been added later.
				
			If you have a static column family and you want to add a dynamic column family in your code while loading the data, 
			it can be added to a static column family anytime. 
			Cassandra gives the freedom to choose column names.
	
	Difference With RDBMS
		Cassandra column family is schema free and is much scalable. 
		Cassandra column family has two attributes – Name and Comparator. 
		So when you have a Cassandra column family, giving it a name becomes mandatory and Comparator is basically a data type for column names. 
		If you don’t specify the comparator, it will assume it to be some default comparator.
		
		Cassandra also has a column of super column families. 
		It will use a super column internally. It is a logical grouping and another level of grouping of columns. 
		So in a user column family, you can have two super columns where we can have users’ personal information and product information.
		
Columns
	A column is the smallest increment of data in Cassandra. It has 3 components:
		1. Name
		2. Value
		3. Time stamp
			Used in conflict resolution and  the time stamp cannot be edited. 
			It’s an internal mechanism to see when this data or column was updated.
		4. Expiring columns
			An expiry date can be given to a column in order to know that the column will be expiring.
		5. Counter columns
			Counter columns is nothing but to maintain the columns so you can increment and decrement those counter columns.
			
Super Columns
	Super Columns is grouping of all the columns altogether depending on a business need and logical grouping. 
	It adds another level of nesting to the regular column family structure. They comprise a super column family structure.
	
	The primary case for super columns is to denormalize multiple rows from other column families in to 
	a single row allowing for materialized view data retrieval.
	
	Limitations of Super Columns
		One limitation is that all sub-columns of a super column family must be de-serialized to read a single sub-column family. 
		Another limitation is that we cannot create secondary indexes on the sub-columns of  a super column.
		
	The data type for a column value is called a validator. 
	And comparator is the data type for a column. 
	The name and address become a column name. 
	So you can have a date  in case of column names. 
	You can also have a time series data by having the date as a column name.
	
Rows
	Wide rows
		There can be wide rows and several rows. There can be millions of columns and rows available.
	Skinny rows 
		Skinny rows have small number of columns having the option of having only limited rows.

Composite key
	It consists of one or more primary key fields. 
	Suppose the name of a city is set as a row key, there maybe a city named in two different states, 
	so you will have to mention which city and which state. 
	This simply means the key has to be stated. 
	Instead of having a simple column key of one type, 
	you can aggregate several values also called components of several types to form one unique column key.
	
Cassandra Data Model
	
	- Data in Cassandra is stored as a set of rows that are organized into tables.
    - Tables are also called column families.
    - Each Row is identified by a primary key value.
    - Data is partitioned by the primary key.
    - You can get the entire data or some data based on the primary key.
	
Cassandra Data Model Components
	
	Keyspaces
		Cassandra data model consists of keyspaces at the highest level. 
		Keyspaces are the containers of data, similar to the schema or database in a relational database. 
		Typically, keyspaces contain many tables.
		
		- A keyspace needs to be defined before creating tables, as there is no default keyspace.
		- A keyspace can contain any number of tables, and a table belongs only to one keyspace. This represents a one-to-many relationship.
		- Replication is specified at the keyspace level. 
			For example, replication of three implies that each data row in the keyspace will have three copies.
		- Further, you need to specify the replication factor during the creation of keyspace. 
			However, the replication factor can be modified later.
		
	Tables
		Within the keyspaces, the tables are defined. Tables are also referred to as Column Families in the earlier versions of Cassandra. 
		Tables contain a set of columns and a primary key, and they store data in a set of rows.
		
		A table contains data in the horizontal and vertical formats, 
		referred to as rows and columns respectively. Some of the features of tables are:
		
			- Tables have multiple rows and columns. As mentioned earlier, a table is also called Column Family in the earlier versions of Cassandra.
			- It is still referred to as column family in some of the error messages and documents of Cassandra.
			- It is important to define a primary key for a table.
			
			
	
	Columns
		Columns define the structure of data in a table. 
		Each column has an associated type, such as integer, text, double, and Boolean. 
		These Cassandra data model components will be discussed in detail in this lesson.
		
	
