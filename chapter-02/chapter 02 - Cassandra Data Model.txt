What is a Database Model?
	A database model shows the logical structure of a database, including the relationships and constraints 
	that determine how data can be stored and accessed. Individual database models are designed based on the rules and concepts 
	of whichever broader data model the designers adopt. Most data models can be represented by an accompanying database diagram.
	In another words: 
	A Database model defines the logical design and structure of a database and defines 
	how data will be stored, accessed and updated in a database management system. 
	
Types of database models
	Some of the most common ones include:

	- Hierarchical database model
	- Relational model
	- Network model
	- Object-oriented database model
	- Entity-relationship model
	- Document model
	- Entity-attribute-value model
	- Star schema
	- The object-relational model, which combines the two that make up its name
	
	You may choose to describe a database with any one of these depending on several factors. 
	The biggest factor is whether the database management system you are using supports a particular model. 
	Most database management systems are built with a particular data model in mind and require their users to adopt that model, 
	although some do support multiple models.

	In addition, different models apply to different stages of the database design process. 
	High-level conceptual data models are best for mapping out relationships between data in ways that people perceive that data. 
	Record-based logical models, on the other hand, more closely reflect ways that the data is stored on the server.

	Selecting a data model is also a matter of aligning your priorities for the database with the strengths of a particular model, 
	whether those priorities include speed, cost reduction, usability, or something else.

	Relational model
		The most common model, the relational model sorts data into tables, also known as relations, each of which consists of columns and rows. 
		Each column lists an attribute of the entity in question, such as price, zip code, or birth date. 
		Together, the attributes in a relation are called a domain. 
		A particular attribute or combination of attributes is chosen as a primary key that can be referred to in other tables, when it’s called a foreign key.
		Within the database, tables can be normalized, or brought to comply with normalization rules that make 
		the database flexible, adaptable, and scalable. When normalized, each piece of data is atomic, or broken into the smallest useful pieces.
		Relational databases are typically written in Structured Query Language (SQL). 
		The model was introduced by E.F. Codd in 1970.
	
	Hierarchical model
		The hierarchical model organizes data into a tree-like structure, where each record has a single parent or root. 
		Sibling records are sorted in a particular order. That order is used as the physical order for storing the database. 
		This model is good for describing many real-world relationships.
		This model was primarily used by IBM’s Information Management Systems in the 60s and 70s, 
		but they are rarely seen today due to certain operational inefficiencies.
		
	Network model
		The network model builds on the hierarchical model by allowing many-to-many relationships between linked records, implying multiple parent records. 
		Based on mathematical set theory, the model is constructed with sets of related records. 
		Each set consists of one owner or parent record and one or more member or child records. 
		A record can be a member or child in multiple sets, allowing this model to convey complex relationships.
		It was most popular in the 70s after it was formally defined by the Conference on Data Systems Languages (CODASYL).
		
	Object-oriented model
		This model defines a database as a collection of objects, or reusable software elements, with associated features and methods. 
		There are several kinds of object-oriented databases:
			- A multimedia database incorporates media, such as images, that could not be stored in a relational database.
			- A hypertext database allows any object to link to any other object. It’s useful for organizing lots of disparate data, 
				but it’s not ideal for numerical analysis.
		The object-oriented database model is the best known post-relational database model, 
		since it incorporates tables, but isn’t limited to tables. 
		Such models are also known as hybrid database models.
		
	Object-relational model
		This hybrid database model combines the simplicity of the relational model with 
			some of the advanced functionality of the object-oriented database model. 
		In essence, it allows designers to incorporate objects into the familiar table structure.
		Languages and call interfaces include SQL3, vendor languages, ODBC, JDBC, and proprietary call interfaces 
			that are extensions of the languages and interfaces used by the relational model.
			
	Entity-relationship model
		This model captures the relationships between real-world entities much like the network model, 
		but it isn’t as directly tied to the physical structure of the database. 
		Instead, it’s often used for designing a database conceptually.
		Here, the people, places, and things about which data points are stored are referred to as entities, 
		each of which has certain attributes that together make up their domain. 
		The cardinality, or relationships between entities, are mapped as well.
		
	NoSQL database models
		- The graph database model, which is even more flexible than a network model, allowing any node to connect with any other.
		- The multivalue model, which breaks from the relational model by allowing attributes to contain a list of data rather than a single data point.
		- The document model, which is designed for storing and managing documents or semi-structured data, rather than atomic data.
		
Understand the analogy between RDBMS and Cassandra Data Model

	CASSANDRA
		- high performance and highly scalable distributed NoSQL DBMS
		- unstructured data
		- flexible schema
		- master-slave core architecture means no single point of failure
		- handles high volume incoming data velocity
		- there are various data source means data come from one/few location
		- it supports simple transactions
		- the outermost container is Keyspace
		- it follows decentralized deployments
		- data written in many locations
		- row represents a unit of replication
		- column represents a unit of storage
		- relationships are represented using collections
		
	RDBMS
		- designed for relational databases
		- It deals with structured data
		- It has fixed schema
		- it has master-slave core architecture means single point of failure
		- it handles moderate incoming data velocity
		- there is limited data source means data come from many locations
		- It supports complex and nested transactions
		- the outermost container is database
		- it follows centralized deployments
		- mainly data written in one location
		- row represents a single record
		- column represents an attribute
		- relationships are represented using keys and joins etc